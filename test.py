from loglib import MCLoc, IMU, Odometer, Send, Get, Laser, ErrorLine, WarningLine, ReadLog, FatalLine, NoticeLine
import matplotlib.pyplot as plt
from matplotlib.widgets import Slider,RadioButtons
import sys
mcl = MCLoc()
imu = IMU()
odo = Odometer()
send = Send()
get = Get()
laser = Laser(1000.0)
err = ErrorLine()
war = WarningLine()
fat = FatalLine()
notice = NoticeLine()
log = ReadLog(sys.argv[1:])
log.parse(mcl, imu, odo, send, get, laser, err, war, fat, notice)

f = open("Report.txt", "w", encoding='utf-8') 
print("Files: ", sys.argv[1:], file = f)
print(len(err.content()[0]), " ERRORs, ", len(war.content()[0]), " WARNINGs, ", len(fat.content()[0]), " FATALs, ", len(notice.content()[0]), " NOTICEs", file = f)
print("ERRORs:", file = f)
for data in err.content()[0]:
    print(data,file = f)
print("WARNINGs:", file = f)
for data in war.content()[0]:
    print(data, file = f)
print("FATALs:", file = f)
for data in fat.content()[0]:
    print(data, file = f)
print("NOTICEs:", file = f)
for data in notice.content()[0]:
    print(data, file = f)
f.close()

plt.figure(1)
plt.subplot(4,1,1)
plt.title('MCLoc')
plt.plot(mcl.t(), mcl.x()[0],'.', label = 'x')
plt.legend()
plt.subplot(4,1,2)
plt.plot(mcl.t(), mcl.y()[0],'.', label = 'y')
plt.legend()
plt.subplot(4,1,3)
plt.plot(mcl.t(), mcl.theta()[0],'.', label = 'theta')
plt.legend()
plt.subplot(4,1,4)
plt.plot(mcl.t(), mcl.confidence()[0],'.', label = 'confidence')
plt.legend()

plt.figure(21)
plt.title('IMU Yaw')
plt.plot(imu.t(), imu.yaw()[0],'.')
plt.figure(2)
plt.subplot(3,3,1)
plt.title('IMU')
plt.plot(imu.t(), imu.ax()[0],'.', label = 'ax')
plt.legend()
plt.subplot(3,3,2)
plt.plot(imu.t(), imu.ay()[0],'.', label = 'ay')
plt.legend()
plt.subplot(3,3,3)
plt.plot(imu.t(), imu.az()[0],'.', label = 'az')
plt.legend()
plt.subplot(3,3,4)
plt.plot(imu.t(), imu.gx()[0],'.', label = 'gx')
plt.legend()
plt.subplot(3,3,5)
plt.plot(imu.t(), imu.gy()[0],'.', label = 'gy')
plt.legend()
plt.subplot(3,3,6)
plt.plot(imu.t(), imu.gz()[0],'.', label = 'gz')
plt.legend()
plt.subplot(3,3,7)
plt.plot(imu.t(), imu.offx()[0],'.', label = 'offx')
plt.legend()
plt.subplot(3,3,8)
plt.plot(imu.t(), imu.offy()[0],'.', label = 'offy')
plt.legend()
plt.subplot(3,3,9)
plt.plot(imu.t(), imu.offz()[0],'.', label = 'offz')
plt.legend()

plt.figure(3)
plt.subplot(2,3,1)
plt.title('Odometer')
plt.plot(odo.t(), odo.x()[0],'.', label = 'x')
plt.legend()
plt.subplot(2,3,2)
plt.plot(odo.t(), odo.y()[0],'.', label = 'y')
plt.legend()
plt.subplot(2,3,3)
plt.plot(odo.t(), odo.theta()[0],'.', label = 'theta')
plt.legend()
plt.subplot(2,3,4)
plt.plot(odo.t(), odo.vx()[0],'.', label = 'vx')
plt.legend()
plt.subplot(2,3,5)
plt.plot(odo.t(), odo.vy()[0],'.', label = 'vy')
plt.legend()
plt.subplot(2,3,6)
plt.plot(odo.t(), odo.vw()[0],'.', label = 'vw')
plt.legend()

plt.figure(4)
plt.subplot(2,2,1)
plt.title('Send And Get Velocity')
plt.plot(send.t(), send.vx()[0], 'o', label= 'send vx')
plt.plot(get.t(), get.vx()[0], '.', label= 'get vx')
plt.plot(send.t(), send.max_vx()[0], 'o', label= 'send max vx')
plt.plot(get.t(), get.max_vx()[0], '.', label= 'get max vx')
plt.legend()
plt.subplot(2,2,2)
plt.plot(send.t(), send.vy()[0], 'o', label= 'send vy')
plt.plot(get.t(), get.vy()[0], '.', label= 'get vy')
plt.legend()
plt.subplot(2,2,3)
plt.plot(send.t(), send.vw()[0], 'o', label= 'send vw')
plt.plot(get.t(), get.vw()[0], '.', label= 'get vw')
plt.plot(send.t(), send.max_vw()[0], 'o', label= 'send max vw')
plt.plot(get.t(), get.max_vw()[0], '.', label= 'get max vw')
plt.legend()
plt.subplot(2,2,4)
plt.plot(send.t(), send.steer_angle()[0], 'o', label= 'send steer_angle')
plt.plot(get.t(), get.steer_angle()[0], '.', label= 'get steer_angle')
plt.legend()

if len(laser.x()[0]) > 0:
    plt.figure(5)
    plt.subplot(2,1,1)
    plt.title("Laser")
    plt.subplots_adjust(bottom=0.2,left=0.1) 
    l1, = plt.plot(laser.x()[0][0], laser.y()[0][0], '.')
    plt.axis('equal')
    plt.grid()
    plt.subplot(2,1,2,projection = 'polar')
    plt.subplots_adjust(bottom=0.2,left=0.1) 
    l2, = plt.plot(laser.angle()[0][0], laser.dist()[0][0], '.')
    axcolor = 'lightgoldenrodyellow'  # slider的颜色
    om1= plt.axes([0.1, 0.08, 0.8, 0.02], facecolor=axcolor) # 第一slider的位置
    som1 = Slider(om1, r'Time', 0, len(laser.ts()[0])-1, valinit=0, valfmt='%i') #产生第二slider
    def update(val):
        s1 = int(som1.val)
        l1.set_xdata(laser.x()[0][s1])
        l1.set_ydata(laser.y()[0][s1])
        l2.set_xdata(laser.angle()[0][s1])
        l2.set_ydata(laser.dist()[0][s1])
    som1.on_changed(update)
plt.show()